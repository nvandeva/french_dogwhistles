# -*- coding: utf-8 -*-
"""keyness.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wNq9OqomUnFmvKjmEgENb-wd4u6A0pTt
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np

def calculate_log_likelihood(row):
    """
    Calculates the Log-Likelihood keyness for a row of a DataFrame.
    The row must contain n_c1, n_c2, total_words_c1, and total_words_c2.
    """
    # Create the 2x2 contingency table from the row's data
    # O11: Freq of word in Ideological Corpus (c2)
    # O12: Freq of word in Neutral Corpus (c1)
    # O21: Freq of other words in Ideological Corpus (c2)
    # O22: Freq of other words in Neutral Corpus (c1)
    o11 = row['n_c2']
    o12 = row['n_c1']
    o21 = row['total_words_c2'] - o11
    o22 = row['total_words_c1'] - o12

    # Calculate row and column totals
    r1 = o11 + o12
    r2 = o21 + o22
    c1 = o11 + o21  # This is total_words_c2
    c2 = o12 + o22  # This is total_words_c1
    n = r1 + r2      # Grand total words

    # Calculate expected frequencies
    e11 = (c1 * r1) / n
    e12 = (c2 * r1) / n
    e21 = (c1 * r2) / n
    e22 = (c2 * r2) / n

    # Calculate Log-Likelihood score term by term
    # We check if observed is 0, if so, the contribution is 0
    term1 = o11 * np.log(o11 / e11) if o11 > 0 else 0
    term2 = o12 * np.log(o12 / e12) if o12 > 0 else 0
    term3 = o21 * np.log(o21 / e21) if o21 > 0 else 0
    term4 = o22 * np.log(o22 / e22) if o22 > 0 else 0

    ll_score = 2 * (term1 + term2 + term3 + term4)
    return ll_score

# --- Main script ---
# Replace 'your_file.csv' with the actual path to your file
file_path = '/content/drive/MyDrive/_thesis_dogwhistles/Cosine-distance-stats/keyness/keyness-analysis.csv'

try:
    # Read the data into a DataFrame
    df = pd.read_csv(file_path)

    # Apply the function to each row to calculate keyness
    df['keyness'] = df.apply(calculate_log_likelihood, axis=1)

    # Sort the DataFrame by keyness in descending order
    df_sorted = df.sort_values(by='keyness', ascending=False)

    # Display the results
    print("üîë Keyness Calculation Results")
    print("-" * 40)
    # Displaying relevant columns for clarity
    print(df_sorted[['target', 'n_c1', 'n_c2', 'keyness', 'log2_ratio']].round(2))
    print("-" * 40)
    print("\nTip: A higher keyness score indicates a more statistically significant difference.")

except FileNotFoundError:
    print(f"‚ùå Error: The file was not found at '{file_path}'. Please check the path and try again.")
except KeyError as e:
    print(f"‚ùå Error: The CSV is missing a required column: {e}. Please check your file's headers.")

from google.colab import files

# Assuming your final DataFrame is named df_sorted
df_sorted.to_csv('keyness_dw.csv', index=False)

# This line triggers the download
files.download('keyness_dw.csv')